{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2025-10-14T00:57:20.664754+00:00",
  "repo": "ietf-wg-asdf/sdf-protocol-mapping",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 1,
      "id": "I_kwDOPSJ9A87Er91H",
      "title": "CDDL for protocol mapping placement in SDF docs",
      "url": "https://github.com/ietf-wg-asdf/sdf-protocol-mapping/issues/1",
      "state": "OPEN",
      "author": "lorenzocorneo",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "enhancement"
      ],
      "body": "Suggesting improvement to add a CDDL snippet showing the delta between original SDF and the proposed protocol mapping extension.\n\n``` cddl\npropertyqualities = {\n ? observable: bool\n ? readable: bool\n ? writable: bool\n ? sdfProtocolMap ; this is the delta\n ~dataqualities\n}\n```\n\nJust saying that sdfProtocolMap can be added as named quality does not help much the implementors of the spec, imo.",
      "createdAt": "2025-08-07T10:07:48Z",
      "updatedAt": "2025-09-23T22:23:02Z",
      "closedAt": null,
      "comments": [
        {
          "author": "rohitmohan96",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, I wasn't sure what would be the write way to represent this in the CDDL without including the entire SDF CDDL.\nI guess, just a diff would suffice?",
          "createdAt": "2025-08-11T15:04:03Z",
          "updatedAt": "2025-08-11T15:04:03Z"
        },
        {
          "author": "JKRhb",
          "authorAssociation": "NONE",
          "body": "I guess for defining the extensions, you could (or should?) also use the mechanisms defined in the CDDL RFC: https://datatracker.ietf.org/doc/html/rfc8610#section-3.9\n\n(I tried to apply the syntax in [PR](https://github.com/ietf-wg-asdf/sdf-relations/pull/6) against the `sdf-relations` repository, but I am not entirely sure if I used it correctly.)",
          "createdAt": "2025-08-16T11:41:25Z",
          "updatedAt": "2025-08-16T11:41:25Z"
        },
        {
          "author": "rohitmohan96",
          "authorAssociation": "COLLABORATOR",
          "body": "I realized that the CDDLs that I added previously were incorrect and was missing the `sdfProtocolMap` object. I have fixed the definitions in #8. ",
          "createdAt": "2025-09-23T22:23:02Z",
          "updatedAt": "2025-09-23T22:23:02Z"
        }
      ]
    },
    {
      "number": 2,
      "id": "I_kwDOPSJ9A87EsNvp",
      "title": "Inclusion of protocol mappings models in this draft",
      "url": "https://github.com/ietf-wg-asdf/sdf-protocol-mapping/issues/2",
      "state": "OPEN",
      "author": "lorenzocorneo",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "question"
      ],
      "body": "Creating this issue to discuss on wether to include the BLE, Zigbee, HTTP protocol mappings in this draft. One alternative could be to just describe sdf protocol mappings in this draft, and having separate drafts for BLE, Zigbee, HTTP, etc...",
      "createdAt": "2025-08-07T10:28:11Z",
      "updatedAt": "2025-08-11T15:03:24Z",
      "closedAt": null,
      "comments": [
        {
          "author": "rohitmohan96",
          "authorAssociation": "COLLABORATOR",
          "body": "I think we should have BLE and zigbee as part of this draft, since the NIPC draft will depend on this, and that way we can get moving quickly. ",
          "createdAt": "2025-08-11T15:03:24Z",
          "updatedAt": "2025-08-11T15:03:24Z"
        }
      ]
    },
    {
      "number": 3,
      "id": "I_kwDOPSJ9A87EsQF6",
      "title": "Protocol mapping usage",
      "url": "https://github.com/ietf-wg-asdf/sdf-protocol-mapping/issues/3",
      "state": "OPEN",
      "author": "lorenzocorneo",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "bug"
      ],
      "body": "Protocol mappings is currently written in several inconsistent ways, e.g., Protocol Mapping, Protocol mapping. Let's decide on one way and make it consistent throughout the text.",
      "createdAt": "2025-08-07T10:31:44Z",
      "updatedAt": "2025-08-07T10:31:44Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 5,
      "id": "I_kwDOPSJ9A87GmE4m",
      "title": "Add examples for HTTP and COAP",
      "url": "https://github.com/ietf-wg-asdf/sdf-protocol-mapping/issues/5",
      "state": "OPEN",
      "author": "bbrinckman",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The document talks about protocol mapping for IP and Npn-IP protocols, with HTTP and CoAP as examples for IP.\nThere are no examples on IP-based mapping. We should add HTTP and CoAP examples.",
      "createdAt": "2025-08-18T19:36:10Z",
      "updatedAt": "2025-08-26T08:18:28Z",
      "closedAt": null,
      "comments": [
        {
          "author": "lorenzocorneo",
          "authorAssociation": "NONE",
          "body": "Yes, and instead we have mappings to Open API. Do we want to keep this? what is the rationale to have that?",
          "createdAt": "2025-08-26T08:18:28Z",
          "updatedAt": "2025-08-26T08:18:28Z"
        }
      ]
    },
    {
      "number": 6,
      "id": "I_kwDOPSJ9A87IKbQg",
      "title": "Is protocol mapping the right name?",
      "url": "https://github.com/ietf-wg-asdf/sdf-protocol-mapping/issues/6",
      "state": "OPEN",
      "author": "lorenzocorneo",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "question"
      ],
      "body": "During the last interim the working group members suggested to spend some time pondering on whether protocol mapping is the terminology we want to use. Let's use this issue to discuss.",
      "createdAt": "2025-08-27T06:32:29Z",
      "updatedAt": "2025-09-02T19:59:05Z",
      "closedAt": null,
      "comments": [
        {
          "author": "rohitmohan96",
          "authorAssociation": "COLLABORATOR",
          "body": "I am copying Bart's response here. I also have the same opinion.\n \n> I suggest we use sdfProtocolMap as currently specified for following reasons:\n> 1. The name is a good description of what is defined in the object, we are mapping an sdf affordance to a protocol implementation\n> 2. We discussed the naming in the hackathon and last face to face and changed it from ProtocolMap to sdfProtocolMap. We seemed to have consensus on this in the face 2 face.\n> 3. This naming has now been adopted in a product that is shipping and developers are already integrating with the APIs. Changing the name again will present difficulties for the developers.\n> \n> With this, I would recommend going with sdfProtocolMap, and only change the name if there is a good reason why this naming would not work.\n\n",
          "createdAt": "2025-09-02T19:59:05Z",
          "updatedAt": "2025-09-02T19:59:05Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 4,
      "id": "PR_kwDOPSJ9A86j8-lA",
      "title": "Use extension point in CDDL",
      "url": "https://github.com/ietf-wg-asdf/sdf-protocol-mapping/pull/4",
      "state": "MERGED",
      "author": "rohitmohan96",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Added an appendix section with the combined cddl. \r\n\r\nAddress #1",
      "createdAt": "2025-08-16T18:23:45Z",
      "updatedAt": "2025-09-11T03:56:29Z",
      "baseRepository": "ietf-wg-asdf/sdf-protocol-mapping",
      "baseRefName": "main",
      "baseRefOid": "16a3a5adb5633adaa9485bfaae7b42c979903f7a",
      "headRepository": "ietf-wg-asdf/sdf-protocol-mapping",
      "headRefName": "sdf-cddl",
      "headRefOid": "f2ff1c77eaedd3244046bae865de3dcb2f6bbf1f",
      "closedAt": "2025-08-18T19:54:45Z",
      "mergedAt": "2025-08-18T19:54:45Z",
      "mergedBy": "rohitmohan96",
      "mergeCommit": {
        "oid": "ea4cc3c3a8e36a2176472b7e1b7b80517d073b71"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOPSJ9A866WPFP",
          "commit": {
            "abbreviatedOid": "f2ff1c7"
          },
          "author": "JKRhb",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-08-17T16:00:04Z",
          "updatedAt": "2025-08-17T16:00:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 7,
      "id": "PR_kwDOPSJ9A86lkdPB",
      "title": "HTTP and CoAP",
      "url": "https://github.com/ietf-wg-asdf/sdf-protocol-mapping/pull/7",
      "state": "OPEN",
      "author": "lorenzocorneo",
      "authorAssociation": "NONE",
      "assignees": [
        "lorenzocorneo"
      ],
      "labels": [],
      "body": "# HTTP and CoAP SDF Protocol Mappings\n\nThis PR aim is to add SDF Protocol Mappings for HTTP and CoAP. It addresses the issue #5.\n\nCoAP is still missing.\n\nThis PR currently features:\n- **OpenAPI CDDL and structure change**\n- **Draft of HTTP protocol mapping**\n",
      "createdAt": "2025-08-27T09:50:05Z",
      "updatedAt": "2025-10-06T10:19:15Z",
      "baseRepository": "ietf-wg-asdf/sdf-protocol-mapping",
      "baseRefName": "main",
      "baseRefOid": "c9593aa5d2825b8fffc2b040ee8d1e7f5df6f31d",
      "headRepository": "ietf-wg-asdf/sdf-protocol-mapping",
      "headRefName": "ip-pmap",
      "headRefOid": "055b0495917542eb8000eb1386ae1296c3711913",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "lorenzocorneo",
          "authorAssociation": "NONE",
          "body": "Up to this commit, HTTP method, path, and query string are in three separate fields. Should they be in a single field?",
          "createdAt": "2025-08-29T06:19:37Z",
          "updatedAt": "2025-08-29T06:19:37Z"
        },
        {
          "author": "rohitmohan96",
          "authorAssociation": "COLLABORATOR",
          "body": "One of the issues with having an http or coap protocol map is that we need to come up with a way to represent the body or payload that is used to read or write a property. We also need a way to describe the variables in the request path for example. \r\n\r\nI think we should keep things simple by having only an openapi protocol map which is already used widely to describe HTTP APIs. \r\n\r\nFor CoAP, I am not aware if something similar exists. Ari did mention during the last hackathon that we could probably use OpenAPI (although it might not cover all the options that CoAP supports). ",
          "createdAt": "2025-09-18T02:20:30Z",
          "updatedAt": "2025-09-18T02:20:30Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOPSJ9A868_EmL",
          "commit": {
            "abbreviatedOid": "be93264"
          },
          "author": "rohitmohan96",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-08-29T23:04:15Z",
          "updatedAt": "2025-08-29T23:04:16Z",
          "comments": [
            {
              "originalPosition": 106,
              "body": "The idea behind using openapi as one of the mappings was because the path, body, etc. in http can have variables that can be considered instance information and openapi provides a format to describe these variables. \nIf we want to have a http mapping, should this be a URI template instead? \n```suggestion\n          \"path\": \"/device/{some_id}/temperature/{some_other_id}?unit=celsius\",\n```",
              "createdAt": "2025-08-29T23:04:15Z",
              "updatedAt": "2025-08-29T23:04:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPSJ9A869Vttx",
          "commit": {
            "abbreviatedOid": "be93264"
          },
          "author": "lorenzocorneo",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-02T13:30:31Z",
          "updatedAt": "2025-09-02T13:30:31Z",
          "comments": [
            {
              "originalPosition": 106,
              "body": "That is a good point; perhaps that is the way!",
              "createdAt": "2025-09-02T13:30:31Z",
              "updatedAt": "2025-09-02T13:30:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPSJ9A86-ZYJi",
          "commit": {
            "abbreviatedOid": "be93264"
          },
          "author": "JKRhb",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "Thank you, @lorenzocorneo, I think this is an interesting starting point for further discussion! See a first set of CoAP-related comments below.",
          "createdAt": "2025-09-07T09:04:02Z",
          "updatedAt": "2025-09-07T09:20:18Z",
          "comments": [
            {
              "originalPosition": 130,
              "body": "For CoAP, there is also `PATCH`, `FETCH`, and `iPATCH` defined. Should these be disallowed to be used here? Or would it make sense to refer to the respective IANA registry here (in case more CoAP methods are added later)?\r\n\r\nI guess similar considerations apply to HTTP.",
              "createdAt": "2025-09-07T09:04:02Z",
              "updatedAt": "2025-09-07T09:20:47Z"
            },
            {
              "originalPosition": 63,
              "body": "As \"HTTP\" already includes \"protocol\", this could probably be shortened.\n\n```suggestion\n - \"http\" is an object containing properties that are specific to HTTP.\n```",
              "createdAt": "2025-09-07T09:05:25Z",
              "updatedAt": "2025-09-07T09:20:18Z"
            },
            {
              "originalPosition": 64,
              "body": "```suggestion\n - \"coap\" is an object containing properties that are specific to CoAP.\n - Other protocol mapping objects can be added by creating a new protocol\n```",
              "createdAt": "2025-09-07T09:05:53Z",
              "updatedAt": "2025-09-07T09:20:18Z"
            },
            {
              "originalPosition": 146,
              "body": "Since CoAP options are different from HTTP in the sense that they aren't simple key-value pairs, we had a long discussion in the Web of Things working group (see https://github.com/w3c/wot-binding-templates/pull/149) that lead to specifying CoAP options via \"features\" instead of an `options` object (also see [this Editor's Note](https://w3c.github.io/wot-binding-templates/bindings/protocols/coap/index.html#issue-container-generatedID)).\r\n\r\nI assume we could apply some of the results here as well. However, that would make this part of the CoAP section a bit more complex. We would also need to define an extension point for future options that may need to be covered later.",
              "createdAt": "2025-09-07T09:14:18Z",
              "updatedAt": "2025-09-07T09:23:17Z"
            },
            {
              "originalPosition": 173,
              "body": "One thing that also became clear from the WoT discussion[^1]: If the property is marked as \"observable\", we do not really need this indication, partly because a client could simply try to observe by adding the respective option and fall back to polling if the server does not include an observe option itself. \n\n[^1]: https://w3c.github.io/wot-binding-templates/bindings/protocols/coap/index.html#observing-resources",
              "createdAt": "2025-09-07T09:19:00Z",
              "updatedAt": "2025-09-07T09:20:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPSJ9A86-ZaBW",
          "commit": {
            "abbreviatedOid": "be93264"
          },
          "author": "JKRhb",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-07T09:25:36Z",
          "updatedAt": "2025-09-07T09:25:36Z",
          "comments": [
            {
              "originalPosition": 121,
              "body": "```suggestion\nThe CoAP protocol mapping allows SDF models to specify how affordances should be\naccessed using CoAP. The mapping includes details such as method,\nURI, as well as optional query string and options.\n```",
              "createdAt": "2025-09-07T09:25:36Z",
              "updatedAt": "2025-09-07T09:25:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPSJ9A86-ZadV",
          "commit": {
            "abbreviatedOid": "be93264"
          },
          "author": "JKRhb",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-07T09:30:55Z",
          "updatedAt": "2025-09-07T09:30:55Z",
          "comments": [
            {
              "originalPosition": 173,
              "body": "The use case covered by the example is pretty interesting, though, so I guess it would just need to be adjusted in the light of the previous comment.",
              "createdAt": "2025-09-07T09:30:55Z",
              "updatedAt": "2025-09-07T09:30:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPSJ9A86-Za8O",
          "commit": {
            "abbreviatedOid": "be93264"
          },
          "author": "JKRhb",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-07T09:37:08Z",
          "updatedAt": "2025-09-07T09:37:08Z",
          "comments": [
            {
              "originalPosition": 194,
              "body": "Since (at least theoretically) you could also use CoAP over something like [Bluetooth GATT](https://datatracker.ietf.org/doc/html/draft-amsuess-core-coap-over-gatt-07) or even [SMS](https://datatracker.ietf.org/doc/html/draft-becker-core-coap-sms-gprs-06), maybe we could also omit \"IP-based\" here.\n\n```suggestion\n| coap         | CoAP                        | Protocol mapping for CoAP-based devices  | This document   |\n```",
              "createdAt": "2025-09-07T09:37:08Z",
              "updatedAt": "2025-09-07T09:37:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPSJ9A86-ZbKV",
          "commit": {
            "abbreviatedOid": "be93264"
          },
          "author": "JKRhb",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-07T09:39:46Z",
          "updatedAt": "2025-09-07T09:39:46Z",
          "comments": [
            {
              "originalPosition": 134,
              "body": "If we have a `body` for HTTP, should we also have a `payload` for CoAP here (or neither)? ",
              "createdAt": "2025-09-07T09:39:46Z",
              "updatedAt": "2025-09-07T09:39:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPSJ9A86-Zbo5",
          "commit": {
            "abbreviatedOid": "be93264"
          },
          "author": "JKRhb",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-07T09:44:06Z",
          "updatedAt": "2025-09-07T09:44:07Z",
          "comments": [
            {
              "originalPosition": 106,
              "body": "I guess something similar could be applied to CoAP as well. However, if the query is included, then using `path` here might not be as accurate anymore.\n\nIf we are using URI template variables, we probably also want to associate them with a schema, similar to how WoT is doing it (see https://www.w3.org/TR/wot-thing-description11/#form-uriVariables).",
              "createdAt": "2025-09-07T09:44:07Z",
              "updatedAt": "2025-09-07T09:46:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPSJ9A86-Zc00",
          "commit": {
            "abbreviatedOid": "be93264"
          },
          "author": "JKRhb",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-07T09:56:29Z",
          "updatedAt": "2025-09-07T09:56:29Z",
          "comments": [
            {
              "originalPosition": 105,
              "body": "Looking at this with WoT TD in mind, I just also had the thought that we probably also need a way to differentiate different \"operation types\" here, i.e., what if you can read _and_ write a property? Would an array of objects that could be associated with certain operations (similar to WoT's `forms`) work here?",
              "createdAt": "2025-09-07T09:56:29Z",
              "updatedAt": "2025-09-07T09:56:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPSJ9A86-cPvR",
          "commit": {
            "abbreviatedOid": "be93264"
          },
          "author": "lorenzocorneo",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-08T06:06:58Z",
          "updatedAt": "2025-09-08T06:06:58Z",
          "comments": [
            {
              "originalPosition": 130,
              "body": "Yes, Jan! Maybe a pointer to the IANA registry is more future proof, although it may be less human readable...It is a trade-off.",
              "createdAt": "2025-09-08T06:06:58Z",
              "updatedAt": "2025-09-08T06:06:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPSJ9A86-cSXn",
          "commit": {
            "abbreviatedOid": "be93264"
          },
          "author": "lorenzocorneo",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-08T06:12:17Z",
          "updatedAt": "2025-09-08T06:12:17Z",
          "comments": [
            {
              "originalPosition": 173,
              "body": "Perhaps a better example where it is not necessary to specify observe is in an event, and not a property like in the case above...",
              "createdAt": "2025-09-08T06:12:17Z",
              "updatedAt": "2025-09-08T06:12:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPSJ9A86-cVJ6",
          "commit": {
            "abbreviatedOid": "be93264"
          },
          "author": "lorenzocorneo",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-08T06:15:47Z",
          "updatedAt": "2025-09-08T06:15:47Z",
          "comments": [
            {
              "originalPosition": 134,
              "body": "I think it may be good to have an optional body. And yes, we should have a `payload` for CoAP.",
              "createdAt": "2025-09-08T06:15:47Z",
              "updatedAt": "2025-09-08T06:15:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPSJ9A86-cbhT",
          "commit": {
            "abbreviatedOid": "be93264"
          },
          "author": "lorenzocorneo",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-08T06:28:01Z",
          "updatedAt": "2025-09-08T06:28:01Z",
          "comments": [
            {
              "originalPosition": 146,
              "body": "My mental model is oriented to simple yet usable solutions, thus avoiding complexity. I though acknowledge that key-value based options may be limiting...Perhaps you could open an issue here on GitHub to be discussed during interim meetings.\r\n\r\nA reflection on the WoT solution is that NIPC specifically targets IoT devices, so it may make sense to provide more functionality in spite of complexity for CoAP. TBD.",
              "createdAt": "2025-09-08T06:28:01Z",
              "updatedAt": "2025-09-08T06:28:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPSJ9A86_-kZw",
          "commit": {
            "abbreviatedOid": "be93264"
          },
          "author": "JKRhb",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-13T14:08:23Z",
          "updatedAt": "2025-09-13T14:08:23Z",
          "comments": [
            {
              "originalPosition": 130,
              "body": "Maybe the current list of entries could be given as an example, while mentioning that the names assigned to the method codes in the [registry](https://www.iana.org/assignments/core-parameters/core-parameters.xhtml#method-codes) are authoritative?",
              "createdAt": "2025-09-13T14:08:23Z",
              "updatedAt": "2025-09-13T14:08:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPSJ9A86_-sHL",
          "commit": {
            "abbreviatedOid": "be93264"
          },
          "author": "JKRhb",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-13T14:20:27Z",
          "updatedAt": "2025-09-13T14:20:27Z",
          "comments": [
            {
              "originalPosition": 146,
              "body": "> Perhaps you could open an issue here on GitHub to be discussed during interim meetings.\r\n\r\nSure, will do :)\r\n\r\nJust for reference, in the WoT Binding Template, we currently have the features `accept`, `contentFormat`, `hopLimit`, `blockwise`, `qblockwise` covered, with additional hints for the minimal polling interval and whether confirmable requests should be used.\r\n\r\nSo, an example that would cover most of these features could look like this:\r\n\r\n```suggestion\r\n          \"accept\": 60,\r\n          \"contentFormat\": 50,\r\n          \"minPollingInterval\": 60,\r\n          \"confirmable\": true,\r\n          \"hopLimit\": 15,\r\n          \"blockwise\": {\r\n            \"block2Size\": 64\r\n          }\r\n```\r\n\r\nVia an extension point, more options could be covered like this in the future.",
              "createdAt": "2025-09-13T14:20:27Z",
              "updatedAt": "2025-09-13T14:20:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPSJ9A86_-wkw",
          "commit": {
            "abbreviatedOid": "be93264"
          },
          "author": "JKRhb",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-13T14:26:58Z",
          "updatedAt": "2025-09-13T14:26:58Z",
          "comments": [
            {
              "originalPosition": 146,
              "body": "Hmm, on second thought, I am wondering whether these features actually classify as class information or if they are mainly instance-specific. I suppose at least `confirmable`, `minPollingInterval`, `hopLimit`, and `blockwise` could be seen that way. The content formats could maybe also be seen as implementation-specific. Leaving this information out (for now) would of course make things a lot easier.",
              "createdAt": "2025-09-13T14:26:58Z",
              "updatedAt": "2025-09-13T14:27:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPSJ9A87AI3bg",
          "commit": {
            "abbreviatedOid": "be93264"
          },
          "author": "lorenzocorneo",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-15T08:54:43Z",
          "updatedAt": "2025-09-15T08:54:43Z",
          "comments": [
            {
              "originalPosition": 105,
              "body": "> what if you can read and write a property?\r\n\r\nThat should be specified in the property and perhaps not in the protocol mapping?",
              "createdAt": "2025-09-15T08:54:43Z",
              "updatedAt": "2025-09-15T08:54:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPSJ9A87AMrX5",
          "commit": {
            "abbreviatedOid": "055b049"
          },
          "author": "JKRhb",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-15T13:12:59Z",
          "updatedAt": "2025-09-15T13:12:59Z",
          "comments": [
            {
              "originalPosition": 105,
              "body": "Hmm, but at the moment, you could only specify one method, while reading and writing would probably use different methods (e.g., `GET` and `PUT`), right?",
              "createdAt": "2025-09-15T13:12:59Z",
              "updatedAt": "2025-09-15T13:12:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPSJ9A87ARFJ5",
          "commit": {
            "abbreviatedOid": "be93264"
          },
          "author": "rohitmohan96",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-15T17:52:11Z",
          "updatedAt": "2025-09-15T17:52:11Z",
          "comments": [
            {
              "originalPosition": 134,
              "body": "How do we define the body here? The body will often contain information that is not known at the time of writing the sdf document (such as the value to be written). It can also be instance information. ",
              "createdAt": "2025-09-15T17:52:11Z",
              "updatedAt": "2025-09-15T17:52:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPSJ9A87ARGJ3",
          "commit": {
            "abbreviatedOid": "055b049"
          },
          "author": "rohitmohan96",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-15T17:53:41Z",
          "updatedAt": "2025-09-15T17:53:41Z",
          "comments": [
            {
              "originalPosition": 107,
              "body": "Do we need this `query` if it is already a part of the `path` above?",
              "createdAt": "2025-09-15T17:53:41Z",
              "updatedAt": "2025-09-15T17:53:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPSJ9A87ATtEQ",
          "commit": {
            "abbreviatedOid": "be93264"
          },
          "author": "JKRhb",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-15T21:28:35Z",
          "updatedAt": "2025-09-15T21:28:36Z",
          "comments": [
            {
              "originalPosition": 134,
              "body": "Yeah, I think that is a good point, @rohitmohan96 \u2013 I guess in practice, the output of all devices is probably going to be the same value quite rarely. Hmm, or do we have a use case that would justify prescribing a body/payload at the model level?",
              "createdAt": "2025-09-15T21:28:35Z",
              "updatedAt": "2025-09-15T21:28:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPSJ9A87ATtet",
          "commit": {
            "abbreviatedOid": "055b049"
          },
          "author": "JKRhb",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-15T21:29:21Z",
          "updatedAt": "2025-09-15T21:29:21Z",
          "comments": [
            {
              "originalPosition": 107,
              "body": "Maybe we could merge `path` and `query` into something like `href`?",
              "createdAt": "2025-09-15T21:29:21Z",
              "updatedAt": "2025-09-15T21:29:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPSJ9A87A7poX",
          "commit": {
            "abbreviatedOid": "be93264"
          },
          "author": "rohitmohan96",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-18T01:12:36Z",
          "updatedAt": "2025-09-18T01:12:36Z",
          "comments": [
            {
              "originalPosition": 134,
              "body": "We shouldn't provide the body or payload in the model. But we do need to provide a way to map the response body or request body to the actual property value. OpenAPI works well for this since the API description is available and a json pointer can be used for the mapping. ",
              "createdAt": "2025-09-18T01:12:36Z",
              "updatedAt": "2025-09-18T01:12:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPSJ9A87A76tz",
          "commit": {
            "abbreviatedOid": "be93264"
          },
          "author": "rohitmohan96",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-18T01:52:51Z",
          "updatedAt": "2025-09-18T01:52:51Z",
          "comments": [
            {
              "originalPosition": 105,
              "body": "That's a good point. This issue is present for other protocols as well. I have tried to put together an idea in #8 which should handle this for BLE and openapi. ",
              "createdAt": "2025-09-18T01:52:51Z",
              "updatedAt": "2025-09-18T01:52:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPSJ9A87E6yYV",
          "commit": {
            "abbreviatedOid": "055b049"
          },
          "author": "lorenzocorneo",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-06T10:19:15Z",
          "updatedAt": "2025-10-06T10:19:15Z",
          "comments": [
            {
              "originalPosition": 107,
              "body": "I like `href`!",
              "createdAt": "2025-10-06T10:19:15Z",
              "updatedAt": "2025-10-06T10:19:15Z"
            }
          ]
        }
      ]
    },
    {
      "number": 8,
      "id": "PR_kwDOPSJ9A86pLwoM",
      "title": "Fix CDDL definitions and add missing `sdfProtocolMap` and protocol specific keys",
      "url": "https://github.com/ietf-wg-asdf/sdf-protocol-mapping/pull/8",
      "state": "OPEN",
      "author": "rohitmohan96",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR fixes the CDDL definitions in the draft to include the `sdfProtocolMap`, `ble`, `zigbee`, and `openapi` keys.\r\n\r\nAlso, added a way to add separate read/write mappings to a single SDF property.\r\n\r\nFor example, we can have a mapping like this which maps the read to the GET and write to the PUT:\r\n``` json\r\n{\r\n  \"sdfProtocolMap\": {\r\n    \"openapi\": {\r\n      \"operationRef\": \"https://example.com/openapi.json#/paths/~1heartrate~1{id}~1current\",\r\n      \"$ref\": \"https://example.com/openapi.json#/components/schema/HeartRate/properties/pulse\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nOr a more specific one: \r\n``` json\r\n{\r\n  \"sdfProtocolMap\": {\r\n    \"openapi\": {\r\n      \"read\": {\r\n        \"operationRef\": \"https://example.com/openapi.json#/paths/~1heartrate~1{id}~1current/get\",\r\n        \"$ref\": \"https://example.com/openapi.json#/components/schema/HeartRate/properties/pulse\"\r\n      },\r\n      \"write\": {\r\n        \"operationRef\": \"https://example.com/openapi.json#/paths/~1heartrate~1{id}~1current/post\",\r\n        \"$ref\": \"https://example.com/openapi.json#/components/schema/HeartRate/properties/pulse\"\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n```",
      "createdAt": "2025-09-18T01:49:49Z",
      "updatedAt": "2025-10-10T09:39:51Z",
      "baseRepository": "ietf-wg-asdf/sdf-protocol-mapping",
      "baseRefName": "main",
      "baseRefOid": "5f35aefa6b5856ec7b10f2fefaeca5c6d49dd3d2",
      "headRepository": "ietf-wg-asdf/sdf-protocol-mapping",
      "headRefName": "fix-cddl",
      "headRefOid": "282504a57ff2bda568ba0a17e9afe1d32f192321",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "rohitmohan96",
          "authorAssociation": "COLLABORATOR",
          "body": "@lorenzocorneo can you take a look at this PR?",
          "createdAt": "2025-10-08T21:31:14Z",
          "updatedAt": "2025-10-08T21:31:14Z"
        },
        {
          "author": "lorenzocorneo",
          "authorAssociation": "NONE",
          "body": "Looks good to me!",
          "createdAt": "2025-10-10T09:39:51Z",
          "updatedAt": "2025-10-10T09:39:51Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 9,
      "id": "PR_kwDOPSJ9A86tjHFe",
      "title": "Add SCIM device schema extension for SDF model",
      "url": "https://github.com/ietf-wg-asdf/sdf-protocol-mapping/pull/9",
      "state": "OPEN",
      "author": "rohitmohan96",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-10-13T22:24:29Z",
      "updatedAt": "2025-10-14T00:55:18Z",
      "baseRepository": "ietf-wg-asdf/sdf-protocol-mapping",
      "baseRefName": "main",
      "baseRefOid": "5f35aefa6b5856ec7b10f2fefaeca5c6d49dd3d2",
      "headRepository": "ietf-wg-asdf/sdf-protocol-mapping",
      "headRefName": "scim-extension",
      "headRefOid": "2232e4a24376228eaa356564670a3c9bdeb5f54b",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOPSJ9A87GsJtU",
          "commit": {
            "abbreviatedOid": "09356a4"
          },
          "author": "elear",
          "authorAssociation": "NONE",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2025-10-14T00:15:22Z",
          "updatedAt": "2025-10-14T00:16:17Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "In a draft you should just state what you are trying to accomplish.  Also, put a link\r\nto the formal description **before** the example.\r\n\r\n```suggestion\r\nWhile SDF provides a way to describe a device, a method is needed to associate a\r\nmapping between an instance of a device and its associated SDF models.  To\r\naccomplish this, we define a SCIM extension that can be used in conjunction with\r\n{{?I-D.ietf-scim-device-model}}, the details of which can be found in\r\n{{scim-sdf-extension-schema}}.\r\n```",
              "createdAt": "2025-10-14T00:15:22Z",
              "updatedAt": "2025-10-14T00:16:17Z"
            },
            {
              "originalPosition": 31,
              "body": "```suggestion\r\n```\r\n\r\nSee above.",
              "createdAt": "2025-10-14T00:16:03Z",
              "updatedAt": "2025-10-14T00:16:17Z"
            }
          ]
        }
      ]
    }
  ]
}